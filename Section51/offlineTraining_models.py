import numpy as np

# Base pool (see equation 4.10)	
# ft0 = A_phi**2 

# ft1 = ubar
# ft2 = wbar
# ft3 = qbar

# ft4 = A_phi_off 

# ft5 = ubar**2
# ft6 = wbar**2
# ft7 = qbar**2

# ft8 = A_phi*A_phi_off

# ft9  = ubar*wbar 
# ft10 = ubar*qbar 
# ft11 = qbar*wbar 

# ft12 = A_phi
# ft13 = A_phi_off**2

# ft14 = beta
# ft15 = beta**2
# ft16 = A_phi*beta
# ft17 = A_phi_off*beta
# ft18 = A_phi_off*beta*A_phi

# ft19  = ubar*A_phi
# ft20  = wbar*A_phi
# ft21  = qbar*A_phi

# ft22 = ubar*beta
# ft23 = wbar*beta
# ft24 = qbar*beta

# ft25 = ubar*A_phi_off
# ft26 = wbar*A_phi_off
# ft27 = qbar*A_phi_off

#### Different model types
### M1
# Base set
# B         = np.array([ft0,ft4,ft8, ft12,ft13,ft14,ft15,ft16,ft17, ft18])
# Weight
w_M1 =np.array([-1.15935400e-03,  5.95941115e-01, -4.06484426e-01,  1.90772743e-03,
	-1.77668451e+01,  4.22648056e-02,  7.73263836e-04, -4.56397182e-02,
	6.61344441e-02, -5.97108153e-02, -9.01803176e-03,  3.31200421e-01,
	-2.68844538e-01, -1.61018808e-02,  5.66062497e+00,  7.99624676e-03,
	1.37902919e-02, -6.82214609e-03,  1.36089065e+00, -8.21392894e-01,
	1.19967290e-07,  1.03011526e-03, -1.29143092e-03,  6.72150016e-08,
	5.57265555e-02, -1.41358477e-05, -8.25716498e-06,  1.71757857e-05,
	1.21705960e-03, -8.51978336e-04])


### M2
# Base set
# B         = np.array([ft4,ft12,ft14,ft1,ft2,ft3])
# Weight
w_M2 =np.array([ 9.70837091e-03, -7.98365806e-04, -4.53682330e-02, -1.44007762e-02,
 -9.89624782e-04, -2.67760853e-03, -2.86038977e-02, -2.80673462e-02,
 -4.25342910e-03, -2.50311487e-03, -1.21710692e-03, -1.62481155e-03,
 -1.43572195e-03,  8.23575725e-07,  4.46183859e-05,  8.09804565e-06,
  7.08275549e-07, -4.47753022e-06])
  
### M3
# Base set
# B         = np.array([ft0, ft1,ft2,ft3, ft4,ft8, ft12,ft13,ft14,ft15,ft16,ft17, ft18])
# Weight
w_M3 =np.array([ 2.35881607e-04, -4.91894471e-03, -9.29921130e-05,  1.78401144e-03,
  -8.34505732e-02,  6.52824582e-02, -2.79526760e-04, -6.37242046e-01,
   3.33067436e-02, -2.78242868e-03, -5.17514071e-02,  5.38983031e-01,
  -3.86350980e-01, -1.74853849e-02,  1.00486124e-03, -3.77521724e-03,
   8.31553544e-04,  3.24644089e-02, -3.72335735e-02, -8.26953445e-03,
  -1.59843377e+00, -5.33412669e-04,  1.10895729e-02,  2.23411363e-03,
  -2.40371300e-02,  6.97333245e-02, -1.29045225e-06, -6.15102587e-06,
  -8.59006380e-07, -1.86642410e-05, -3.26957566e-04, -1.32317628e-03,
   1.46344294e-06,  7.09984056e-03, -9.41629037e-06, -8.21269604e-06,
   8.12312222e-06,  1.30301668e-03, -9.74690721e-04])
   
### M4
# Base set
# B         = np.array([ft0, ft1,ft2,ft3, ft4,ft5,ft6,ft7, ft8, ft9,ft10,ft11, ft12,ft13,ft14,ft15,ft16,ft17, ft18])
# Weight
w_M4 =np.array([ 4.46532189e-04, -7.68094974e-03 ,-1.19961055e-04, -1.46321537e-03,
-5.79318019e-02 ,-1.48125854e-04,  1.45208196e-05,  3.19333652e-04,
4.61351910e-02 ,-6.12954786e-04,  1.64570855e-05, -1.40401624e-03,
-7.01532471e-04 , 3.71822956e-01,  2.94956753e-02, -1.52713550e-03,
-5.23636741e-02 , 3.32002171e-01, -2.46001127e-01, -1.83201708e-02,
4.23959860e-04 ,-3.74679216e-03,  1.64069744e-04, -6.76838563e-02,
-4.03202715e-04 , 1.19568171e-04,  3.30766725e-04,  3.78608801e-02,
-1.18245800e-04 ,-5.68390160e-05, -1.50592112e-04, -7.24617372e-03,
-1.38776429e+00 , 6.59583978e-04,  1.25859356e-02,  4.79945989e-04,
-5.63606558e-02 , 8.92460816e-02,  2.87877299e-06, -1.03869836e-05,
-3.14512423e-07 ,-2.13790099e-05, -1.26019224e-04, -3.30215611e-07,
-1.84753783e-07 ,-2.46553090e-06, -1.46278465e-03, -2.09948016e-06,
-3.26555015e-06 ,-2.95436494e-06, -3.46981930e-06,  9.89154816e-03,
-3.48106293e-05 ,-9.38492442e-06,  2.62436639e-05,  9.83168619e-04,
-5.70770691e-04])

### M5
# Base set
# B         = np.array([ft0, ft1,ft2,ft3, ft4,ft5,ft6,ft7, ft8, ft9,ft10,ft11, ft12,ft13,ft14,ft15,ft16,ft17, ft18, ft19,ft20,ft21,ft22,ft23,ft24,ft25,ft26,ft27])
# Weight
w_M5 =np.array([ 2.11902467e-04, -9.45961231e-03, -1.13764243e-04, -3.93027606e-05,
-8.23328900e-03, -1.70334906e-04,  9.18835697e-05,  6.23554071e-04,
1.40512601e-02, -1.86710346e-04,  1.49109277e-05, -6.14312729e-04,
-5.14150851e-04, -7.50580582e-01,  3.11070049e-02, -1.67217412e-04,
-5.43880067e-02,  2.45321003e-01, -1.99623505e-01,  1.09477660e-03,
1.69457297e-04, -3.30084237e-04,  2.34567057e-04,  3.61400797e-03,
2.47088851e-04,  1.42636803e-03,  1.68122053e-03, -5.45839375e-04,
-1.87998114e-02,  1.00265239e-03, -1.08028897e-03,  1.42898985e-04,
-1.06077507e-01,  8.06569124e-04,  3.96306033e-05, -5.13302709e-03,
6.75935152e-02,  3.23147416e-04, -1.75991427e-03, -1.30585720e-04,
-6.65820078e-03, -2.48169102e+00,  9.08686835e-04,  1.63600574e-02,
1.73832787e-03,  2.43433054e-01, -1.79125650e-01,  2.84612614e-04,
-2.15805782e-03,  8.16484790e-04,  5.34624890e-03,  1.39963940e-03,
-2.68833585e-03,  4.63050382e-03,  1.32399123e-03, -4.43688204e-03,
-1.19034582e-06, -1.00645228e-05,  6.64947900e-08,  2.85628497e-07,
3.00859329e-04, -2.67770217e-06,  1.89956006e-08, -6.86220480e-07,
-1.58499915e-03, -1.80426281e-07, -5.29028155e-06, -1.24540500e-07,
9.40872387e-07,  1.17574981e-02, -3.31482235e-05, -1.91113983e-05,
2.23304450e-05, -1.48936473e-04,  4.36676077e-06, -5.70101277e-07,
-4.64314948e-07, -9.93647042e-06, -1.53698252e-05,  1.20075855e-05,
-2.15298861e-05, -2.15539251e-05,  4.13073467e-05,  1.75146262e-04])

  
